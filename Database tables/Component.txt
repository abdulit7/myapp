import mysql.connector

def create_database():
    try:
        # Connect to MySQL server
        connection = mysql.connector.connect(
            host="200.200.200.23",
            user="root",
            password="Pak@123"
        )
        cur = connection.cursor()

        # Create database if it doesn't exist
        cur.execute("CREATE DATABASE IF NOT EXISTS itasset")
        cur.execute("USE itasset")

        # Disable foreign key checks
        cur.execute("SET FOREIGN_KEY_CHECKS = 0")

        # Drop existing tables if they exist
        cur.execute("DROP TABLE IF EXISTS disposed_components")
        cur.execute("DROP TABLE IF EXISTS deployed_components")
        cur.execute("DROP TABLE IF EXISTS component")

        # Create the `component` table
        cur.execute("""
            CREATE TABLE component (
                id INT AUTO_INCREMENT PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                category_id INT,
                company VARCHAR(255),
                model VARCHAR(255),
                serial_no VARCHAR(255),
                purchaser VARCHAR(255),
                location VARCHAR(255),
                price DECIMAL(10, 2),
                warranty VARCHAR(255),
                status VARCHAR(50) DEFAULT 'Available',
                bill_copy VARCHAR(255),
                purchase_date DATE,
                image_path VARCHAR(255),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                FOREIGN KEY (category_id) REFERENCES category(id) ON DELETE SET NULL
            )
        """)

        # Create the `deployed_components` table
        cur.execute("""
            CREATE TABLE deployed_components (
                id INT AUTO_INCREMENT PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                category_id INT,
                company VARCHAR(255),
                model VARCHAR(255),
                serial_no VARCHAR(255),
                purchaser VARCHAR(255),
                location VARCHAR(255),
                price DECIMAL(10, 2),
                warranty VARCHAR(255),
                bill_copy VARCHAR(255),
                purchase_date DATE,
                image_path VARCHAR(255),
                deployed_to INT,
                user_department VARCHAR(255),
                deploy_date DATE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                FOREIGN KEY (category_id) REFERENCES category(id) ON DELETE SET NULL,
                FOREIGN KEY (deployed_to) REFERENCES users(id) ON DELETE SET NULL
            )
        """)
        cur.execute("CREATE INDEX idx_deployed_to ON deployed_components(deployed_to)")

        # Create the `disposed_components` table
        cur.execute("""
            CREATE TABLE disposed_components (
                id INT AUTO_INCREMENT PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                category_id INT,
                company VARCHAR(255),
                model VARCHAR(255),
                serial_no VARCHAR(255),
                purchaser VARCHAR(255),
                location VARCHAR(255),
                price DECIMAL(10, 2),
                warranty VARCHAR(255),
                bill_copy VARCHAR(255),
                purchase_date DATE,
                image_path VARCHAR(255),
                disposal_type VARCHAR(50) NOT NULL,
                disposal_date DATE,
                amount_earned DECIMAL(10, 2),
                disposal_reason VARCHAR(255),
                disposal_location VARCHAR(255),
                sale_details VARCHAR(255),
                sold_to VARCHAR(255),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                FOREIGN KEY (category_id) REFERENCES category(id) ON DELETE SET NULL
            )
        """)

        # Re-enable foreign key checks
        cur.execute("SET FOREIGN_KEY_CHECKS = 1")

    except mysql.connector.Error as err:
        print(f"Error: {err}")
    finally:
        if connection.is_connected():
            cur.close()
            connection.close()
            print("MySQL connection is closed")

if __name__ == "__main__":
    create_database()